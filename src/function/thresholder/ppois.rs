////////////////////////////////////////////////////////////////////////////////////////////////////

// private function
use super::ppois;

////////////////////////////////////////////////////////////////////////////////////////////////////

// private function
macro_rules! test_ppois {
  ( $function: ident;
      params |> $lambda: expr, $sample: expr;
      expect |> $expect: expr;
    ) => {
    #[test]
    fn $function() {
      let pois_vec: Vec<f64> = $sample
        .iter()
        .map(|num| unsafe { ppois(*num, $lambda, 1, 0) })
        .collect();
      assert_eq!(
        pois_vec, $expect,
        "\n\nCalculated value:\n{:#?}.\n\nExpected value:\n{:#?}.\n\n",
        pois_vec, $expect,
      );
    }
  };
}

////////////////////////////////////////////////////////////////////////////////////////////////////

// test
test_ppois!(test00;
  params |> 0., vec![0., 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., ];
  expect |> vec![1.0000000000000000000, 1.0000000000000000000, 1.0000000000000000000, 1.0000000000000000000, 1.0000000000000000000, 1.0000000000000000000, 1.0000000000000000000, 1.0000000000000000000, 1.0000000000000000000, 1.0000000000000000000, 1.0000000000000000000, ];
);

test_ppois!(test01;
  params |> 1., vec![0., 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., ];
  expect |> vec![0.367_879_441_171_442_33, 0.735_758_882_342_884_7, 0.919_698_602_928_605_8, 0.981_011_843_123_846_2, 0.996_340_153_172_656_3, 0.999_405_815_182_418_3, 0.999_916_758_850_712, 0.999_989_750_803_325_3, 0.999_998_874_797_402, 0.999_999_888_574_521_7, 0.999_999_989_952_233_6, ];
);

test_ppois!(test02;
  params |> 2., vec![0., 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., ];
  expect |> vec![0.135_335_283_236_612_7, 0.406_005_849_709_838_1, 0.676_676_416_183_063_4, 0.857_123_460_498_546_9, 0.947_346_982_656_288_9, 0.983_436_391_519_385_6, 0.995_466_194_473_751_2, 0.998_903_281_032_141_3, 0.999_762_552_671_738_9, 0.999_953_501_924_982_8, 0.999_991_691_775_631_5, ];
);

test_ppois!(test03;
  params |> 3., vec![0., 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., ];
  expect |> vec![0.049_787_068_367_863_944, 0.199_148_273_471_455_8, 0.423_190_081_126_843_53, 0.647_231_888_782_231_1, 0.815_263_244_523_772, 0.916_082_057_968_696_6, 0.966_491_464_691_158_8, 0.988_095_496_143_642_7, 0.996_197_007_938_324, 0.998_897_511_869_884_5, 0.999_707_663_049_352_7, ];
);

test_ppois!(test04;
  params |> 4., vec![0., 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., ];
  expect |> vec![0.018_315_638_888_734_18, 0.091_578_194_443_670_93, 0.238_103_305_553_544_36, 0.433_470_120_366_709, 0.628_836_935_179_873_5, 0.785_130_387_030_405_2, 0.889_326_021_597_426_2, 0.948_866_384_207_152_6, 0.978_636_565_512_015_8, 0.991_867_757_203_066_1, 0.997_160_233_879_486_3, ];
);

test_ppois!(test05;
  params |> 5., vec![0., 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., ];
  expect |> vec![0.006_737_946_999_085_467, 0.040_427_681_994_512_805, 0.124_652_019_483_081_16, 0.265_025_915_297_361_8, 0.440_493_285_065_212_3, 0.615_960_654_833_063_2, 0.762_183_462_972_938_7, 0.866_628_325_929_992_6, 0.931_906_365_278_151_5, 0.968_171_942_693_795_1, 0.986_304_731_401_617_1, ];
);

test_ppois!(test06;
  params |> 6., vec![0., 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., ];
  expect |> vec![0.002_478_752_176_666_358_5, 0.017_351_265_236_664_505, 0.061_968_804_416_658_974, 0.151_203_882_776_647_84, 0.285_056_500_316_631_27, 0.445_679_641_364_611_3, 0.606_302_782_412_591_2, 0.743_979_760_453_717, 0.847_237_493_984_561, 0.916_075_983_005_124_3, 0.957_379_076_417_461_9, ];
);

test_ppois!(test07;
  params |> 7., vec![0., 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., ];
  expect |> vec![0.000_911_881_965_554_516_2, 0.007_295_055_724_436_133, 0.029_636_163_880_521_784, 0.081_765_416_244_721_65, 0.172_991_607_882_071_35, 0.300_708_276_174_360_97, 0.449_711_055_848_698_8, 0.598_713_835_523_036_8, 0.729_091_267_738_082_3, 0.830_495_937_238_673_5, 0.901_479_205_889_087_3, ];
);

test_ppois!(test08;
  params |> 8., vec![0., 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., ];
  expect |> vec![0.000_335_462_627_902_511_85, 0.003_019_163_651_122_608_6, 0.013_753_967_744_002_994, 0.042_380_111_991_684_004, 0.099_632_400_487_046_05, 0.191_236_062_079_625_2, 0.313_374_277_536_397_57, 0.452_960_809_486_994_6, 0.592_547_341_437_591_2, 0.716_624_258_727_010_9, 0.815_885_792_558_546_3, ];
);

test_ppois!(test09;
  params |> 9., vec![0., 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., ];
  expect |> vec![0.000_123_409_804_086_679_56, 0.001_234_098_040_866_797, 0.006_232_195_106_377_316, 0.021_226_486_302_908_888, 0.054_963_641_495_104_916, 0.115_690_520_841_057_73, 0.206_780_839_859_987_08, 0.323_896_964_312_895_94, 0.455_652_604_322_418_8, 0.587_408_244_331_941_3, 0.705_988_320_340_511_7, ];
);

test_ppois!(test10;
  params |> 10., vec![0., 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., ];
  expect |> vec![4.539_992_976_248_485_4e-5, 0.000_499_399_227_387_333_3, 0.002_769_395_715_511_576, 0.010_336_050_675_925_728, 0.029_252_688_076_961_082, 0.067_085_962_879_031_8, 0.130_141_420_882_483_07, 0.220_220_646_601_699_07, 0.332_819_678_750_718_8, 0.457_929_714_471_852_27, 0.583_039_750_192_985_4,];
);

////////////////////////////////////////////////////////////////////////////////////////////////////
